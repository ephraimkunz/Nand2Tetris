// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Instruction decoding + load A register. 
    // Load A if this is an instruction or if the d1 bit is set.
    // Value to load A with is what came from the ALU if C instruction, or lower 15 bits of instruction
    // if A instruction.
    Not(in=instruction[15], out=isAInstruction);
    Or(a=isAInstruction, b=instruction[5], out=loadAReg);
    Mux16(a[0..14]=instruction[0..14], a[15]=false, b=aluOut, sel=instruction[15], out=aRegIn);
    ARegister(in=aRegIn, load=loadAReg, out=aRegOut, out[0..14]=addressM, out[0..14]=pcIn);

    // D register. Load when d2 bit is set and not A instruction.
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=aluOut, load=loadD, out=x);

    // ALU input b. Select A reg when a in instruction is cleared, else select M location.
    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=y);

    // ALU controls. They've made this very easy. c1..c6 is zx..no.
    ALU(x=x, y=y, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=aluOut, zr=zrOut, ng=ngOut);

    // PC.
    Or(a=zrOut, b=ngOut, out=zrOrNg);
    Not(in=zrOrNg, out=GT);

    And(a=instruction[0], b=GT, out=JGT);
    And(a=instruction[1], b=zrOut, out=JE);
    And(a=instruction[2], b=ngOut, out=JLT);

    Or(a=JGT, b=JE, out=JGTOrJE);
    Or(a=JGTOrJE, b=JLT, out=jumpMatches);
    And(a=jumpMatches, b=instruction[15], out=someJump); // Can only jump on C instructions where the flags are aligned.

    Not(in=someJump, out=notSomeJump);
    PC(in[0..14]=pcIn, in=false, load=someJump, inc=notSomeJump, reset=reset, out[0..14]=pc);

    // writeM output. Asserted when D3 is asserted and this is a C instruction.
    And(a=instruction[3], b=instruction[15], out=writeM);
}